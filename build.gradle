plugins {
    id "com.eriwen.gradle.js" version "2.14.1"
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.2'
//    gradleVersion = '1.9'
}

javascript.source {
    dev {
        js {
            srcDir "src/web/src/main/webapp/app/"
            include "**/*.js"
            exclude "app.js"
        }
    }
}

def commonProject = project(':common')
def serverProject = project(':server')
def serviceProject = project(':service')
def webProject = project(':web')
def reportProject = project(':report')
def tomcatPath = 'tomcat'
def tomcatWebApp = tomcatPath + '/webapps'
def releaseTmpDir = 'build/release'
def tomcatConf = tomcatPath + '/conf'
def tomcatReportsDir = tomcatConf + '/reports'
def warFileName = 'template'
def webWarFileName = 'template-web'
// VERSIONS
def spring_version = '4.2.2.RELEASE'
def spring_security_version = '4.0.3.RELEASE'
def hibernate_version = '4.3.8.Final'
def jackson_version = '1.9.13'
def fasterxml_jackson_version = '2.6.3'

//println 'Common project dir: ' + commonProject.projectDir


allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    version = '1.0'
    jar {
        manifest {
            attributes 'Implementation-Title': 'Nikolay Product',
                    'Implementation-Version': version
        }
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts"
        }
//        flatDir(dirs: "$rootDir/lib")
    }

    dependencies {
//        testCompile 'junit:junit:4.11'
        testCompile 'org.testng:testng:6.8'
        compile 'javax:javaee-api:7.0'
        compile 'log4j:log4j:1.2.17'
        compile group: 'commons-io', name: 'commons-io', version: '2.5'
        compile 'javax.mail:mail:1.4.7'
        compile 'javax.mail:javax.mail-api:1.5.5'
    }
}

configure([commonProject]) {
    dependencies {
        compile 'org.springframework:spring-web:' + spring_version
        compile 'org.springframework:spring-tx:' + spring_version
        compile 'org.springframework:spring-orm:' + spring_version
        compile 'org.hibernate:hibernate-entitymanager:' + hibernate_version
        compile 'org.hibernate:hibernate-core:' + hibernate_version
        testCompile 'org.hibernate:hibernate-core:' + hibernate_version
        compile 'org.springframework.security:spring-security-core:' + spring_security_version
        compile 'mysql:mysql-connector-java:5.1.9'
        compile files('lib/sqljdbc4.jar')
//        compile 'com.microsoft.sqlserver:sqljdbc4:4.0'
        compile 'commons-dbcp:commons-dbcp:1.4'
        compile 'commons-lang:commons-lang:2.6'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.6.3'
    }
}


configure([serverProject]) {
    dependencies {
        compile commonProject
        compile group: 'net.sf.jasperreports', name: 'jasperreports', version: '6.3.0'
        testCompile 'org.springframework:spring-test:' + spring_version
//        testCompile 'org.springframework:spring-orm:' + spring_version
    }
}

configure([serviceProject]) {
    apply plugin: 'war'
    dependencies {
        compile commonProject
        compile serverProject
        providedCompile "javax.servlet:servlet-api:2.5"
        providedCompile 'log4j:log4j:1.2.17'
        compile 'org.springframework:spring-webmvc:' + spring_version
        compile 'org.springframework:spring-web:' + spring_version
        compile 'org.springframework.security:spring-security-web:' + spring_security_version
        compile 'org.springframework.security:spring-security-config:' + spring_security_version
        compile 'org.codehaus.jackson:jackson-mapper-asl:' + jackson_version
        compile 'com.fasterxml.jackson.core:jackson-core:' + fasterxml_jackson_version
        compile 'com.fasterxml.jackson.core:jackson-databind:' + fasterxml_jackson_version
        compile 'javax.inject:javax.inject:1'
//        compile fileTree(dir: 'lobster', include: '*.jar')
    }
    war {
        archiveName = warFileName + ".war"
        classpath fileTree(dir: '../../lib', include: '*.jar')
    }
}

configure([webProject]) {
    apply plugin: 'war'
    dependencies {
        providedCompile "javax.servlet:servlet-api:2.5"
        providedCompile 'log4j:log4j:1.2.17'
    }
    war {
        archiveName = webWarFileName + ".war"
    }
}


task cleanTomcatDeployDir(type: org.gradle.api.tasks.Delete) {
    delete tomcatWebApp + '/' + warFileName
    delete tomcatWebApp + '/' + warFileName + '.war'
    delete tomcatWebApp + '/' + webWarFileName
    delete tomcatWebApp + '/' + webWarFileName + '.war'
}

task cleanTomcatReportsDir(type: org.gradle.api.tasks.Delete) {
    delete tomcatReportsDir
}

task copyReports(type: Copy, dependsOn: [cleanTomcatReportsDir]) {
    from 'src/report/src/main/resources/'
    into tomcatReportsDir
}

task createAndCopyWar(type: Copy, dependsOn: [serviceProject.build, webProject.build, cleanTomcatDeployDir, copyReports]) {
    from 'src/service/build/libs/' + warFileName + '.war', 'src/web/build/libs/' + webWarFileName + '.war'
    into tomcatWebApp
}

//  ------------------ RELEASE ----------------------
task cleanReleaseDir(type: org.gradle.api.tasks.Delete) {
    delete releaseTmpDir
}

task releasePrepareWar(type: Copy) {
    from 'src/service/build/libs/' + warFileName + '.war',
         'src/web/build/libs/' + webWarFileName + '.war'
    into releaseTmpDir
}

task releasePrepareDb(type: Copy) {
    from 'src/db'
    into releaseTmpDir + '/db'
    exclude 'liquibase.properties'
}

task releasePrepareTomcat(type: Copy) {
    from 'src/tomcat-conf'
    into releaseTmpDir + '/tomcat'
}

task release(type: Zip, dependsOn: [cleanReleaseDir, releasePrepareWar, releasePrepareDb, releasePrepareTomcat]) {
    archivesBaseName = 'furniture'
    destinationDir = new File('releases')
    from releaseTmpDir
    into 'release'
}

task buildAndRelease(type: Zip, dependsOn: [serviceProject.build, webProject.build, release]) {
    group = "build"
    archivesBaseName = 'furniture'
    destinationDir = new File('releases')
    from releaseTmpDir
    into 'release'
}

release.shouldRunAfter serviceProject.build
release.shouldRunAfter webProject.build

gradle.taskGraph.whenReady {taskGraph ->
    if (taskGraph.hasTask(release)) {
        String fileContents = new File('src/server/src/main/resources/META-INF/build.version').getText('UTF-8')
        def formattedDate = new Date().format('yyyyMMddHHmmss')
        version = fileContents + '_' + formattedDate
        println 'RELEASE VERSION: "' + version + '"'
    } /*else {
        version = '1.0-SNAPSHOT'
    }*/
}

// Combine JS files
task combine(type: com.eriwen.gradle.js.tasks.CombineJsTask) {
    source = javascript.source.dev.js.files
    dest = "src/web/src/main/webapp/app/app-all.js"
}

//  ------------------ LIQUIBASE ----------------------
configurations {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    liquibase
}

dependencies {
    liquibase 'org.liquibase:liquibase-core:3.4.1'
}

task liquibase_Update(type: JavaExec) {
    group = "Liquibase"
    classpath configurations.liquibase
    main = "liquibase.integration.commandline.Main"
    workingDir = 'src/db'

    args "--changeLogFile=liquibase/update.xml"
    args "--defaultsFile=liquibase.properties"
    args "--logLevel=info"

    args "update"
}

// -------------------------------------------------------

